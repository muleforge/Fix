<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsd:schema xmlns="http://www.mulesoft.org/schema/mule/fix"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:mule="http://www.mulesoft.org/schema/mule/core"
            xmlns:schemadoc="http://www.mulesoft.org/schema/mule/schemadoc"
            targetNamespace="http://www.mulesoft.org/schema/mule/fix"
            elementFormDefault="qualified"
            attributeFormDefault="unqualified">

    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:import namespace="http://www.mulesoft.org/schema/mule/core"
                schemaLocation="http://www.mulesoft.org/schema/mule/core/3.2/mule.xsd"/>
    <xsd:import namespace="http://www.mulesoft.org/schema/mule/schemadoc"
                schemaLocation="http://www.mulesoft.org/schema/mule/schemadoc/3.2/mule-schemadoc.xsd"/>

    <xsd:annotation>
		<xsd:documentation>Allows mule to send and receive messages
			using the</xsd:documentation>
		<xsd:appinfo>
			<schemadoc:short-name>Fix</schemadoc:short-name>
			<schemadoc:page-title>Fix Transport</schemadoc:page-title>
			<schemadoc:transport-features
				receiveEvents="true" dispatchEvents="false"
                requestEvents="false" transactions="false" streaming="false">
				<schemadoc:MEPs supported="one-way" default="one-way"/>
            </schemadoc:transport-features>
		</xsd:appinfo>
	</xsd:annotation>

	<xsd:element name="connector" type="fixConnectorType" substitutionGroup="mule:abstract-connector">
		<xsd:annotation>
			<xsd:documentation>
				Allows mule to send and receive messages using the
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>


	<xsd:complexType name="fixConnectorType">
		<xsd:complexContent>
			<xsd:extension base="mule:connectorType">
				<!--

					TODO for simple property types you can just add xsd:attribute
					elements here For complex properties with multiple values you can
					add custom elements and register a definition parser with
					fixNamespaceHandler. For example - <xsd:attribute
					name="swizzleSize" type="mule:substitutableInt"> <xsd:annotation>
					<xsd:documentation> Sets the amount of swizzle available for your
					twizzle </xsd:documentation> </xsd:annotation> </xsd:attribute>

					Note the type of the attribute is mule:substitutableInt. For
					non-string simple types you should use mule:substitutableBoolean,
					mule:substitutableLong, etc since these types allow property
					placeholders to be used instead of the actual value. The property
					can then be set according to the properties available to the MUle
					instance. i.e <fix:connector name="smallTwizzler"
					swizzlerSize="${small.swizzle}"/> where small.swizzle is set in a
					properties files or system property. This makes it easy to use the
					same config file for differnet environments such as Developement,
					UAT and Production
				-->
				<xsd:attribute name="config" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
							Sets the location of the FIX configuration
							file.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="message-store-factory" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
							Sets the class name of the MessageStoreFactory
							to be used with this connector. The class must inherit from
							quickfix.MessageStoreFactory and implement either the default
							constructor or the constructor taking a quickfix.SessionSettings
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="log-factory" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
							Sets the class name of the LogFactory to be
							used with this connector.The class must inherit from
							quickfix.LogFactory and implement either the default
							constructor or the constructor taking a quickfix.SessionSettings
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!--
		The following define endpoint elements for this transport. Attributes
		for the endpoint can be defined at the section at the bottom
	-->
	<xsd:element name="inbound-endpoint" type="inboundEndpointType"
		substitutionGroup="mule:abstract-inbound-endpoint" />
	<xsd:complexType name="inboundEndpointType">
		<xsd:complexContent>
			<xsd:extension base="mule:inboundEndpointType">
				<xsd:attributeGroup ref="addressAttributes" />
				<xsd:attributeGroup ref="propertyAttributes" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="outbound-endpoint" type="outboundEndpointType"
		substitutionGroup="mule:abstract-outbound-endpoint" />
	<xsd:complexType name="outboundEndpointType">
		<xsd:complexContent>
			<xsd:extension base="mule:outboundEndpointType">
				<xsd:attributeGroup ref="addressAttributes" />
				<xsd:attributeGroup ref="propertyAttributes" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="endpoint" type="globalEndpointType"
		substitutionGroup="mule:abstract-global-endpoint" />
	<xsd:complexType name="globalEndpointType">
		<xsd:complexContent>
			<xsd:extension base="mule:globalEndpointType">
				<xsd:attributeGroup ref="addressAttributes" />
				<xsd:attributeGroup ref="propertyAttributes" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:attributeGroup name="addressAttributes">
		<!--
			TODO define address attributes for this endpoints i.e. queue, host,
			port, etc <xsd:attribute name="foo" type="xsd:string"/>
		-->
		<xsd:attribute name="sessionID" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					The SessionID is used to identify which session
					the endpoint will
					send/recieve to.
    			</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:attributeGroup>

	<xsd:attributeGroup name="propertyAttributes">
		<!--
			TODO define property attributes for this endpoint. These are
			properties that can configure the way the transport behaves but are
			not used to create the endpoint address. <xsd:attribute name="bar"
			type="xsd:string"/>
		-->
	</xsd:attributeGroup>

	<xsd:element name="fix-version-transformer" type="fixVersionTransformerType"
		substitutionGroup="mule:abstract-transformer" />
	<xsd:complexType name="fixVersionTransformerType">
		<xsd:complexContent>
			<xsd:extension base="mule:abstractTransformerType">
				<xsd:attribute name="fromVersion" use="required" type="xsd:string" />
				<xsd:attribute name="toVersion" use="required" type="xsd:string" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>


</xsd:schema>